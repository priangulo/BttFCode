package featurepartitioning.actions;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.IProject;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IPackageFragment;
import org.eclipse.jdt.core.IPackageFragmentRoot;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.ITypeHierarchy;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.core.resources.IResource;
import org.eclipse.jdt.core.dom.CompilationUnit;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.dom.Assignment;
import org.eclipse.jdt.core.dom.Comment;
import org.eclipse.jdt.core.dom.FieldDeclaration;
import org.eclipse.jdt.core.dom.IBinding;
import org.eclipse.jdt.core.dom.IMethodBinding;
import org.eclipse.jdt.core.dom.ITypeBinding;
import org.eclipse.jdt.core.dom.IVariableBinding;
import org.eclipse.jdt.core.dom.IfStatement;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.PackageDeclaration;
import org.eclipse.jdt.core.dom.SimpleName;
import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
import org.eclipse.jdt.core.dom.Type;
import org.eclipse.jdt.core.dom.TypeDeclaration;
import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
import org.eclipse.jdt.core.JavaModelException;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class PartitionAction implements IWorkbenchWindowActionDelegate {
	private IWorkbenchWindow window;
	/**
	 * The constructor.
	 */
	public PartitionAction() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
	 */
	public void run(IAction action) {
		IWorkspace iWorkspace = ResourcesPlugin.getWorkspace();
		IWorkspaceRoot iWorkspaceRoot = iWorkspace.getRoot();
		IProject[] iProjectList = iWorkspaceRoot.getProjects();
		for(IProject iProject : iProjectList) {
			final IJavaProject iJavaProject = JavaCore.create(iProject);
			
			//if(iJavaProject.getElementName().compareTo("P") != 0) continue;
			
			try {
				IPackageFragment[] iPackageFragmentList = iJavaProject.getPackageFragments();
				for(IPackageFragment iPackageFragment : iPackageFragmentList) {
					if(iPackageFragment.getKind() != IPackageFragmentRoot.K_SOURCE) {
						continue;
					}
					
					
					ICompilationUnit[] iCompilationUnitList = iPackageFragment.getCompilationUnits();
					for(ICompilationUnit iCompilationUnit : iCompilationUnitList) {
						ASTParser astParser = ASTParser.newParser(AST.JLS3);
						astParser.setResolveBindings(true);
						astParser.setSource(iCompilationUnit);						
						CompilationUnit compilationUnit = (CompilationUnit)astParser.createAST(null);
						
						compilationUnit.accept(new ASTVisitor(){
							public boolean visit(PackageDeclaration node) {								
								return true;
							}
							
							public boolean visit(TypeDeclaration node){
								//System.out.println("Class: " + node.getName());
								String class_name = node.getName().getFullyQualifiedName();
								List<Type> class_interfaces = new ArrayList<Type>();
								class_interfaces = node.superInterfaceTypes();
								for (Type t : class_interfaces){
									System.out.println(class_name + " -> " + t.resolveBinding().getQualifiedName());
								}
								//System.out.println("  Dependencies: " + node.superInterfaceTypes().toString());
								return true;
							}
							
							public boolean visit(MethodDeclaration node) {
								//System.out.println("Method: " + node.getName());
								/*node.accept(new ASTVisitor(){
									public boolean visit(IfStatement node){
										System.out.println("IfStatement getExpression(): " + node.getExpression());
										node.accept(new ASTVisitor(){
											public boolean visit(VariableDeclarationFragment node){
												System.out.println("IfStatement VariableDeclarationFragment: " + node.toString());
												return true;
											}
										});
										return true;
									}

									public boolean visit(VariableDeclarationFragment node){
										System.out.println("VariableDeclarationFragment: " + node.toString());
										System.out.println("  Binding: " + node.resolveBinding());
										return true;
									}
								});*/
								return true;

							}
							
							public boolean visit(VariableDeclarationFragment node){
								System.out.println("VariableDeclarationFragment: " + node.toString());
								System.out.println("VariableDeclarationFragment: " + node.getName().getFullyQualifiedName());
								System.out.println("VariableDeclarationFragment: " + node.resolveBinding().getVariableDeclaration());
								System.out.println("VariableDeclarationFragment: " + node.resolveBinding().getName());
								System.out.println("VariableDeclarationFragment: " + node.resolveBinding().getClass().getName() + "." + node.resolveBinding().getDeclaringMethod().getName() + "." + node.resolveBinding().getName());
								node.accept(new ASTVisitor() {
									public boolean visit(SimpleName node) {
										IBinding binding = node.resolveBinding();
										if (binding != null) {
											if (binding.getKind() == IBinding.VARIABLE){
												IVariableBinding variableBinding = (IVariableBinding)binding;
												System.out.println("  variable " + variableBinding.getName() + " depends on Class: " + variableBinding.getVariableDeclaration().getType().getQualifiedName());
											}
											else if (binding.getKind() == IBinding.METHOD){
												IMethodBinding methodBinding = (IMethodBinding)binding;
												System.out.println("  method " + methodBinding.getName() + " depends on Class: " + methodBinding.getDeclaringClass().getQualifiedName());
											}
											else if (binding.getKind() == IBinding.TYPE){
												ITypeBinding typeBinding = (ITypeBinding)binding;
												System.out.println("  class " + typeBinding.getName() + " depends on Superclass: " + typeBinding.getSuperclass().getQualifiedName());
												System.out.println("  class " + typeBinding.getName() + " depends on Package: " + typeBinding.getPackage().getName());
												try {
													IType type = iJavaProject.findType(typeBinding.getQualifiedName());
													if(type != null){
														ITypeHierarchy typeHierarchie = type.newTypeHierarchy(new NullProgressMonitor());
														System.out.println("  class " + typeBinding.getName() + " depends on Interfaces: ");
														for(IType t : typeHierarchie.getSuperInterfaces(type)){
															System.out.println("     " + t.getFullyQualifiedName());
														}
													}
												} 
												catch (JavaModelException ex) {
													System.out.println("  error on getting interfaces");
													ex.printStackTrace();
													
												}
/*												catch (Exception ex) {
													System.out.println("  error on getting interfaces");
													ex.printStackTrace();
													
												}*/
											}
										}
										return true;
									}
									/*public boolean visit(Assignment node) {
										System.out.println(" visit(Assignment node)");
										node.getRightHandSide().accept(new ASTVisitor(){
											public boolean visit(SimpleName node) {
												IBinding binding=node.resolveBinding();
												System.out.println("  binding " + binding.toString());
												if (binding != null) {
													System.out.println("  binding.getKind() " + binding.getKind());
													if (binding.getKind() == IBinding.VARIABLE){
														IVariableBinding variableBinding=(IVariableBinding)binding;
														System.out.println("  getDeclaringClass " + variableBinding.getDeclaringClass());
													}
												}
												      
												      
												ITypeBinding b = node.resolveTypeBinding().getElementType();
												if(b instanceof IMethodBinding) {
													IMethodBinding m = (IMethodBinding)b;
													System.out.println("  getDeclaringClass " + m.getDeclaringClass());
												}
												return true;
											}
											
										});
										return true;
									}*/
								});
								//System.out.println("VariableDeclarationFragment: " + node.toString());
								//System.out.println("  Binding: " + node.resolveBinding().getType());
								return true;
							}
							
							public boolean visit(FieldDeclaration node) {
								System.out.println("Field: " + node.toString());
								return true;
							}
						});
					}
				}
			}
			catch (JavaModelException e) 
			{
				e.printStackTrace();
			}		
		}
	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
	 */
	public void selectionChanged(IAction action, ISelection selection) {
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	/**
	 * We will cache window object in order to
	 * be able to provide parent shell for the message dialog.
	 * @see IWorkbenchWindowActionDelegate#init
	 */
	public void init(IWorkbenchWindow window) {
		this.window = window;
	}
}